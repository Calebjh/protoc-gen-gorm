package plugin

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os/exec"
	"strings"

	plugin "github.com/gogo/protobuf/protoc-gen-gogo/plugin"
)

// CleanFiles will prevent generation of any files where no real code is generated
func (p *OrmPlugin) CleanFiles(response *plugin.CodeGeneratorResponse) {

	for i := 0; i < len(response.File); i++ {
		file := response.File[i]
		for _, skip := range p.EmptyFiles {
			if strings.Contains(file.GetName(), strings.Trim(skip, ".proto")) {
				response.File = append(response.File[:i], response.File[i+1:]...)
				i--
				break
			}
		}
		file.Content = CleanImports(file.Content)
		file.Content = writeVersions(file.Content)
	}
}

func writeVersions(file *string) *string {
	dat, err := ioutil.ReadFile("Gopkg.lock")
	if err != nil {
		panic(err)
	}

	repos := strings.Split(string(dat), "[[projects]]\n")
	var buffer bytes.Buffer
	version, err := exec.Command("git", "describe", "--tags").CombinedOutput()
	if err != nil {
		panic(err)
	}
	buffer.WriteString("// Generated by protoc-gen-gorm ")
	buffer.WriteString(string(version))
	buffer.WriteString("// Built expecting these (or compatible) versions:\n")
	for _, project := range repos {
		describeRepo := false
		if strings.Contains(project, "github.com/infobloxopen/atlas-app-toolkit") {
			buffer.WriteString("// - github.com/infobloxopen/atlas-app-toolkit\n")
			describeRepo = true
		} else if strings.Contains(project, "github.com/jinzhu/gorm") {
			buffer.WriteString("// - github.com/jinzhu/gorm\n")
			describeRepo = true
		} else if strings.Contains(project, "github.com/golang/protobuf") {
			buffer.WriteString("// - github.com/golang/protobuf\n")
			describeRepo = true
		}
		if describeRepo {
			for _, line := range strings.Split(project, "\n") {
				if strings.Contains(line, "revision") {
					buffer.WriteString(fmt.Sprintf("// Revision: %q\n", strings.Split(line, `"`)[1]))
				} else if strings.Contains(line, "version") {
					buffer.WriteString(fmt.Sprintf("// Version: %q\n", strings.Split(line, `"`)[1]))
				}
			}
		}
	}
	parts := strings.SplitN(*file, "\n", 3)
	newContent := fmt.Sprintf("%s\n%s\n\n%s%s", parts[0], parts[1], buffer.String(), parts[2])
	return &newContent
}
